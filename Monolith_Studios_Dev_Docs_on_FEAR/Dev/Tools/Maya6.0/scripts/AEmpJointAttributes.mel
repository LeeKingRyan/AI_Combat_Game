global proc AEmpAnimationBindingName(string $node)
{
	//~ editorTemplate -dimControl $node "mpAnimationBindingName" true;
}

global proc AEmpAnimationBindingVisibleRadius(string $node)
{
	editorTemplate -dimControl $node "mpAnimationBindingVisibleRadius" true;
}

global proc AEmpAnimationBindingVisibleRadiusReplace(string $radiusAttribute)
{
	string $node;
	string $buffer[];
	tokenize($radiusAttribute, ".", $buffer);
	$node = (size($buffer) > 0) ? $buffer[0] : "";
	
	setUITemplate -pst attributeEditorTemplate;	
	
	if( `attributeExists "mpAnimationBindingVisibleRadius" $node` )
	{
		rowLayout -e -vis 1 visibleRadiusLayout;
		button -e -c ("mpModelVisibleRadius " + $node) btnRecalc;
	}
	else
	{
		rowLayout -e -vis 0 visibleRadiusLayout;
	}
	
	setUITemplate -ppt;
}

global proc AEmpAnimationBindingVisibleRadiusNew(string $radiusAttribute)
{
	setUITemplate -pst attributeEditorTemplate;
	rowLayout -nc 2 -vis 0 visibleRadiusLayout;
		text -l "";
		button -l "Recalculate Visible Radius" -align "center" btnRecalc;
	setParent ..;
	setUITemplate -ppt;
	
	AEmpAnimationBindingVisibleRadiusReplace $radiusAttribute;
}

//--------------------------------------------------------------------------------------------
/** @author Jeff Cotton
 *  @date   08/11/2004
 *  @return int - the index of the matching int. Returns size( ints ) if testInt
 *                 matches nothing
 *  @param  testInt - int to find a match for
 *  @param  ints - int array to find the match in
 *  @brief  finds the index to a int that matches testInt in a int array
 */
proc int mpGetIndexOfIntInIntArray( int $testInt, int $ints[] )
{
	for ( $ii = 0; $ii < size( $ints ); $ii++ )
	{
		if ( $ints[$ii] == $testInt )
		{
			return $ii;
		}
	}
	
	return size( $ints );
}

//--------------------------------------------------------------------------------------------
/** @author Jeff Cotton
 *  @date   08/11/2004
 *  @param  attribute - name of attribute to update
 *  @param  value - what to set the attribute to
 *  @brief  updates a string array attribute
 *
 *   this function is needed, because the syntax for changing a string array attribute is so
 *  cumbersome.
 */
proc mpUpdateStringArrayAttribute( string $attribute, string $value[] )
{
	string $setAttrCommand = "setAttr " + $attribute + "-type stringArray " + size( $value );
	for ( $element in $value )
	{
		$setAttrCommand += " \"" + `encodeString $element` + "\"";
	}
	
	eval( $setAttrCommand );
}

//--------------------------------------------------------------------------------------------
/** @author Jeff Cotton
 *  @date   08/11/2004
 *  @param  attribute - name of attribute to update
 *  @param  value - what to set the attribute to
 *  @brief  updates a string array attribute
 *
 *   this function is needed, because the syntax for changing a string array attribute is so
 *  cumbersome.
 */
proc mpUpdateIntArrayAttribute( string $attribute, int $value[] )
{
	string $setAttrCommand = "setAttr " + $attribute + "-type Int32Array " + size( $value );
	for ( $element in $value )
	{
		$setAttrCommand += " " + $element;
	}
	
	eval( $setAttrCommand );
}

//--------------------------------------------------------------------------------------------
/** @author Jeff Cotton
 *  @date   08/11/2004
 *  @param  array - string array to remove an item from
 *  @param  index - the index of the item to remove
 *  @return the new array
 */
proc string[] mpStringArrayRemoveItemIndexed( string $array[], int $index )
{
	string $newArray[];
	
	for ( $ii = 0; $ii < size( $array ); $ii++ )
	{
		if ( $ii != $index )
		{
			$newArray[size( $newArray )] = $array[$ii];
		}
	}
	
	return $newArray;
}

//--------------------------------------------------------------------------------------------
/** @author Jeff Cotton
 *  @date   08/11/2004
 *  @param  array - int array to remove an item from
 *  @param  index - the index of the item to remove
 *  @return the new array
 */
proc int[] mpIntArrayRemoveItemIndexed( int $array[], int $index )
{
	int $newArray[];
	
	for ( $ii = 0; $ii < size( $array ); $ii++ )
	{
		if ( $ii != $index )
		{
			$newArray[size( $newArray )] = $array[$ii];
		}
	}
	
	return $newArray;
}

//--------------------------------------------------------------------------------------------
/** @author Jeff Cotton
 *  @date   08/11/2004
 *
 *   global variables VERY BAD, but I can think of no other way to support information
 *  passing to the on changed commands
 */
global string $gmpKeyStringUIElfPath = "";

//--------------------------------------------------------------------------------------------
/** @author Jeff Cotton
 *  @date   08/11/2004
 *  @brief  on changed callback for the keyString control
 *
 *  @note the use of global variables. if there is a better solution please let me know
 */
global proc AEmpAnimationBindingKeyStringChanged( string $keyStringsAttr,
                                                  string $keyStringTimesAttr,
                                                  string $keyStringIndexAttr )
{
	global string $gmpKeyStringUIElfPath;
	
	string $keyStrings[]     = `getAttr $keyStringsAttr`;
	int    $keyStringTimes[] = `getAttr $keyStringTimesAttr`;
	
	if ( size( $keyStrings ) != size( $keyStringTimes ) )
	{
		// there is something bad going on here, but I'm not sure yet how to handle it.
		//  @todo figure it out.
	}
	
	string $oldTimeUnit = `currentUnit -query -time`;
	currentUnit -time millisec;
	
	string $editTextValue = `textFieldGrp -query -text keyString`;
	int    $index         = mpGetIndexOfIntInIntArray( `currentTime -query`,
	                                                   $keyStringTimes );
	
	// extract the pieces of the index attribute
	string $attributePath[2];
	string $keyStringIndexAttrShort;
	string $objectName;
	if ( `tokenize $keyStringIndexAttr "." $attributePath` );
	{
		$objectName = $attributePath[0];
		$keyStringIndexAttrShort = $attributePath[1];
		for ( $ii = 2; $ii < size( $attributePath ); $ii++ )
		{
			$keyStringIndexAttrShort = $attributePath[$ii];
		}
	}
	
	// if the new string is the empty string, and it's not a new time value 
	//  then delete the time and string from their arrays
	if ( "" == $editTextValue && size( $keyStringTimes ) != $index )
	{
		$keyStrings     = mpStringArrayRemoveItemIndexed( $keyStrings, $index );
		$keyStringTimes = mpIntArrayRemoveItemIndexed( $keyStringTimes, $index );
	}
	else
	{
		$keyStrings[ $index ]     = $editTextValue;
		$keyStringTimes[ $index ] = `currentTime -query`;
	}
	
	mpUpdateStringArrayAttribute( $keyStringsAttr, $keyStrings );
	mpUpdateIntArrayAttribute( $keyStringTimesAttr, $keyStringTimes );
	
	mpRefreshKeyStringBindingsButton( $keyStringsAttr, $keyStringTimesAttr, $keyStringIndexAttr );
	
	currentUnit -time $oldTimeUnit;
}

//--------------------------------------------------------------------------------------------
/** @author Jeff Cotton
 *  @date   08/11/2004
 *  @brief  
 */
global proc mpUpdateKeyStringOnTimeChange( string $keyStringsAttr,
                                           string $keyStringTimesAttr )
{
	global string $gmpKeyStringUIElfPath;
	
	string $keyStrings[]     = `getAttr $keyStringsAttr`;
	int    $keyStringTimes[] = `getAttr $keyStringTimesAttr`;
	
	string $oldTimeUnit = `currentUnit -query -time`;
	currentUnit -time millisec;
	
	int    $keyStringIndex   = mpGetIndexOfIntInIntArray( `currentTime -query`, $keyStringTimes );
	string $newString        = ( $keyStringIndex >= 0 && $keyStringIndex < size( $keyStrings ) ) ?
	                                $keyStrings[ $keyStringIndex ] : "";
	
	// change the textField value
	textFieldGrp -edit -text $newString $gmpKeyStringUIElfPath;
	
	currentUnit -time $oldTimeUnit;
}

//--------------------------------------------------------------------------------------------
/** @author Jeff Cotton
 *  @date   09/20/2004
 */
global proc AEmpAnimationBindingKeyStringDelete()
{
	global string $gmpKeyStringUIElfPath;
	
	if ( "" != $gmpKeyStringUIElfPath )
	{
		if ( `control -exists $gmpKeyStringUIElfPath` )
		{
			deleteUI $gmpKeyStringUIElfPath;
		}
		
		$gmpKeyStringUIElfPath = "";
	}
}

//--------------------------------------------------------------------------------------------
/** @author Jeff Cotton
 *  @date   09/22/2004
 */
global proc mpRefreshKeyStringBindingsButton( string $keyStringsAttr,
                                              string $keyStringTimesAttr,
                                              string $keyStringIndexAttr )
{
	string $oldTimeUnit = `currentUnit -query -time`;
	currentUnit -time millisec;
	
	// extract the pieces of the index attribute
	string $attributePath[2];
	string $keyStringIndexAttrShort;
	string $objectName;
	if ( `tokenize $keyStringIndexAttr "." $attributePath` );
	{
		$objectName = $attributePath[0];
		$keyStringIndexAttrShort = $attributePath[1];
		for ( $ii = 2; $ii < size( $attributePath ); $ii++ )
		{
			$keyStringIndexAttrShort = "." + $attributePath[$ii];
		}
	}
	
	// go ahead and make this joint a root
	mpModelRoot $objectName;
	
	if ( "" != $objectName && "" != $keyStringIndexAttrShort && `objExists $keyStringIndexAttr` )
	{
		string $keyStrings[]     = `getAttr $keyStringsAttr`;
		int    $keyStringTimes[] = `getAttr $keyStringTimesAttr`;
		
		// cut all keys
		cutKey -time ":" -attribute $keyStringIndexAttrShort -clear $objectName;
		
		for ( $ii = 0; $ii < size( $keyStrings ); $ii++ )
		{
			if ( $keyStrings[$ii] != "" )
			{
				// put in new ones
				setKeyframe -time      $keyStringTimes[$ii]
				            -value     $ii
				            -attribute $keyStringIndexAttrShort $objectName;
			}
		}
	}
	
	currentUnit -time $oldTimeUnit;
}

//--------------------------------------------------------------------------------------------
/** @author Jeff Cotton
 *  @date   08/11/2004
 */
global proc AEmpAnimationBindingKeyStringReplace( string $keyStringsAttr,
                                                  string $keyStringTimesAttr,
                                                  string $keyStringIndexAttr )
{
	global string $gmpKeyStringUIElfPath;
	
	// delete the old UI
	AEmpAnimationBindingKeyStringDelete();
	
	if ( `objExists $keyStringsAttr` && `objExists $keyStringTimesAttr` )
	{
		// create the text field UI
		string $changeCommand = "AEmpAnimationBindingKeyStringChanged( \"" + $keyStringsAttr + "\", \"" + $keyStringTimesAttr + "\", \"" + $keyStringIndexAttr + "\" )";
		string $buttonCommand = "mpRefreshKeyStringBindingsButton( \"" + $keyStringsAttr + "\", \"" + $keyStringTimesAttr + "\", \"" + $keyStringIndexAttr + "\" )";
		
		$gmpKeyStringUIElfPath = `textFieldButtonGrp -label         "Key String"
		                                             -buttonLabel   "..."
		                                             -editable      true
		                                             -changeCommand $changeCommand
		                                             -buttonCommand $buttonCommand
		                                             keyString`;
		
		// add a scriptJob so that we can update the key string on time changes
		string $timechangeCommand = "mpUpdateKeyStringOnTimeChange( \"" + $keyStringsAttr + "\", \"" + $keyStringTimesAttr + "\" )";
		
		scriptJob -parent $gmpKeyStringUIElfPath
		          -event  "timeChanged"
		          $timechangeCommand;
		
		string $oldTimeUnit = `currentUnit -query -time`;
		currentUnit -time millisec;
		
		string $keyStrings[]     = `getAttr $keyStringsAttr`;
		int    $keyStringTimes[] = `getAttr $keyStringTimesAttr`;
		
		int    $keyStringIndex   = mpGetIndexOfIntInIntArray( `currentTime -query`, $keyStringTimes );
		string $newString        = ( $keyStringIndex >= 0 && $keyStringIndex < size( $keyStrings ) ) ?
		                                $keyStrings[ $keyStringIndex ] : "";
		
		textFieldGrp -edit -text $newString $gmpKeyStringUIElfPath;
		
		currentUnit -time $oldTimeUnit;
	}
}

//--------------------------------------------------------------------------------------------
/** @author Jeff Cotton
 *  @date   08/11/2004
 */
global proc AEmpAnimationBindingKeyStringNew( string $keyStringsAttr,
                                              string $keyStringTimesAttr,
                                              string $keyStringIndexAttr )
{
	AEmpAnimationBindingKeyStringReplace( $keyStringsAttr, $keyStringTimesAttr, $keyStringIndexAttr );
}

global proc AEmpJointAttributes( string $node )
{
	editorTemplate -beginLayout "Monolith Attributes" -collapse true;
		editorTemplate -beginLayout "Animation" -collapse false;
			
			editorTemplate -label      "Animation Weight"
			               -addControl "mpAnimationWeight";
			
			editorTemplate -label      "Rotation Only"
			               -addControl "mpNodeFlagRotationOnly";
			
			editorTemplate -beginLayout "Global Animation Properties"
			               -collapse false;
					
				editorTemplate -label "Name" -addControl "mpAnimationBindingName" "AEmpAnimationBindingName";
				editorTemplate -label "Dims" -addControl "mpAnimationBindingDims";
				editorTemplate -label "Translation" -addControl "mpAnimationBindingTranslation";
				editorTemplate -label "Rotation" -addControl "mpAnimationBindingRotation";
				editorTemplate -label "Interpolation" -addControl "mpAnimationBindingInterpolation";
				editorTemplate -label "Visible Radius" -addControl "mpAnimationBindingVisibleRadius" "AEmpAnimationBindingVisibleRadius";
				editorTemplate -callCustom "AEmpAnimationBindingKeyStringNew"
				                           "AEmpAnimationBindingKeyStringReplace"
				                           { "mpAnimationBindingKeyStrings.mpAnimationBindingKeyStringValue",
				                             "mpAnimationBindingKeyStrings.mpAnimationBindingKeyStringTime",
				                             "mpAnimationBindingKeyStringIndex" };
				
			editorTemplate -endLayout;
			//editorTemplate -beginLayout "Utilities" -collapse false;
			//	editorTemplate -callCustom "AEmpAnimationBindingVisibleRadiusNew" "AEmpAnimationBindingVisibleRadiusReplace" "mpAnimationBindingVisibleRadius";
			//editorTemplate -endLayout;
		editorTemplate -endLayout;
		editorTemplate -beginLayout "Physics" -collapse false;
			editorTemplate -beginLayout "Physics Weight Set" -collapse false;
				editorTemplate -label "Velocity Gain" -addControl "mpPhysicsVelocityGain";
				editorTemplate -label "Hierarchal Gain" -addControl "mpPhysicsHierarchalGain";
				editorTemplate -label "Physical" -addControl "mpPhysicsPhysical";
			editorTemplate -endLayout;
			editorTemplate -beginLayout "Global Physics Properties" -collapse false;
				editorTemplate -label "Model Weight" -addControl "mpPhysicsModelWeight";
				editorTemplate -label "Model Density" -addControl "mpPhysicsModelDensity";
				editorTemplate -label "Visible Node" -addControl "mpPhysicsVisibleNode";
				editorTemplate -label "Visible Radius" -addControl "mpPhysicsVisibleRadius";
			editorTemplate -endLayout;
		editorTemplate -endLayout;
	editorTemplate -endLayout;

	editorTemplate -suppress "mpChildModels";
	editorTemplate -suppress "mpFileName";
	editorTemplate -suppress "mpAnimationBindingKeyStrings";
}
