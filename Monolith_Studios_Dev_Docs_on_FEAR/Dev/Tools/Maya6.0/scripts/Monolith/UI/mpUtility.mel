//--------------------------------------------------------------------------------------------
/** @file   Monolith/UI/mpUtility.mel
 *  @date   08/18/2004
 *
 * (c) 1997-2004 Monolith Productions, Inc.  All Rights Reserved
 */
//--------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------
/** @author Jeff Cotton
 *  @date   08/25/2004
 *  @param  title - the title of the dialog box
 *  @param  message - message the user sees in the dialog box
 *  @param  buttons - a list of the buttons to appear on the dialog
 *  @param  defaultButton - the text returned as the default action in silent mode
 *  @param  cancelButton - the text returned if the user presses the escape key
 *  @param  silentMessage - message to print as a warning in silent mode
 *  @param  bSilent - silent mode flag
 *  @return the string of the default button in silent mode, or the string of the
 *           button that the user pressed.
 *  @brief  Opens a modal dialog box for the user interaction.
 *
 *   if Silent is true then the dialog will not show, and a warning message will be printed
 *  to the console, and the default button string will be returned. If  message is empty then
 *  the silentMessage will replace it. If both are empty then the dialog will fail to show
 */
global proc string mpNotifyDialog( string $title,
                                   string $message,
                                   string $buttons[],
                                   string $defaultButton,
                                   string $cancelButton,
                                   string $silentMessage,
                                   int    $bSilent )
{
	if ( "" == $message )
	{
		$message = $silentMessage;
	}
	
	if ( "" == $message && "" == $silentMessage)
	{
		warning( "No Message provided to NotifyDialog" );
		return $defaultButton;
	}
	
	if ( $bSilent )
	{
		if ( "" != $silentMessage )
		{
			warning( $silentMessage );
		}
		
		return $defaultButton;
	}
	
	string $dialog =                         "confirmDialog -title          \"" + $title + "\"\n" +
	                                         "              -message        \"" + $message + "\"\n";
	for ( $button in $buttons ) { $dialog += "              -button         \"" + $button + "\"\n"; }
	if ( "" != $defaultButton ) { $dialog += "              -defaultButton  \"" + $defaultButton + "\"\n"; }
	if ( "" != $cancelButton )  { $dialog += "              -cancelButton   \"" + $cancelButton + "\"\n"; }
	                              $dialog += "              ;\n";
	
	return eval( $dialog );
}

//--------------------------------------------------------------------------------------------
/** @author Jeff Cotton
 *  @date   08/18/2004
 *  @brief  Resize command for a scroll layout that also resizes it's child layout
 *
 *  @todo document
 *  @date 08/20/04 - moved to a new file in the UI sub folder
 *                    original location: "Monolith/mpTabMain.mel"
 *                    @author Jeff Cotton
 */
global proc mpResizeScrollLayout( string $theLayout, int $minimum[] )
{
	if ( 2 != size( $minimum ) )
	{
		error( "Incorrect number of minimum values: [" + size( $minimum ) + "]" );
	}
	
	if ( `scrollLayout -exists $theLayout` )
	{
		int $childCount = `layout -query -numberOfChildren $theLayout`;

		if ( 0 != $childCount )
		{
			if ( 1 < $childCount )
			{
				error( "Layout [" + $theLayout + "] has too many children: [" + $childCount + "]" );
			}

			int    $scrollLayoutWidth      = `scrollLayout -query -scrollAreaWidth  $theLayout`;
			int    $scrollLayoutHeight     = `scrollLayout -query -scrollAreaHeight $theLayout`;
			string $scrollLayoutChildren[] = `layout -query -childArray  $theLayout`;
			
			int $newWidth  = $scrollLayoutWidth  > $minimum[0] ? $scrollLayoutWidth  : $minimum[0];
			int $newHeight = $scrollLayoutHeight > $minimum[1] ? $scrollLayoutHeight : $minimum[1];

			layout -edit -width $newWidth
			             -height $newHeight
			             $scrollLayoutChildren[0];
		}
		else
		{
			error( "Layout [" + $theLayout + "] does not have any children" );
		}
	}
	else
	{
		error( "Layout [" + $theLayout + "] does not exist as a scroll layout" );
	}
}


//--------------------------------------------------------------------------------------------
/** @author Jeff Cotton
 *  @date   10/02/2004
 *  @param  $parentUI - parent ui of the update command to be executed
 *  @brief  Gets the embedded update command from a UI layout and executes it.
 */
global proc mpUIUpdate( string $parentUI )
{
	string $controlPath = $parentUI + "|mpUIEmbeddedUpdateCommand";
	
	if ( `text -exists $controlPath` )
	{
		string $updateCommand = `text -query -label $controlPath`;
		if ( "" != $updateCommand )
		{
			if ( catchQuiet( eval( $updateCommand ) ) )
			{
				error( "Monolith UI: Update command for " + $parentUI + " failed - " + $updateCommand );
			}
		}
	}
	else
	{
		warning( "Monolith UI: trying to update a UI that doesn't have an embedded update command - " + $parentUI );
	}
}

//--------------------------------------------------------------------------------------------
/** @author Jeff Cotton
 *  @date   10/02/2004
 *  @param  $updateCommand - the update command to embed
 *  @brief  creates an unmanaged ui element and sets it's label to be the given command for
 *           retrieval later
 */
global proc mpUIEmbedUpdateCommand( string $updateCommand )
{
	string $parentUI = `setParent -query`;
	
	if ( `layout -exists $parentUI` )
	{
		if ( catchQuiet( `text -manage false -label $updateCommand "mpUIEmbeddedUpdateCommand"` ) )
		{
			error( "Monolith UI: Failed Creating embedded update command - " + $parentUI );
		}
	}
	else
	{
		error( "Monolith UI: Parent of embedded update command must be a layout that supports multiple children - " + $parentUI );
	}
}
